import { listRecentChannelComments } from "@/lib/youtube";
import { prisma } from "@/lib/db";
import { appConfig } from "@/lib/config";
import { ensureVideoIndexFor } from "@/lib/transcriptQueue";

export async function syncComments(daysBack = appConfig.sync.defaultDays) {
  let pageToken: string | undefined;
  let synced = 0;
  let stop = false;
  const cutoff = new Date();
  cutoff.setDate(cutoff.getDate() - daysBack);

  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà "‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
  const affectedVideoIds = new Set<string>();

  while (!stop) {
    const { comments, nextPageToken } = await listRecentChannelComments({ daysBack, pageToken });

    for (const comment of comments) {
      const publishedAt = new Date(comment.publishedAt);
      if (publishedAt < cutoff) {
        stop = true;
        break;
      }

      // üîé ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ "‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° ‡∏Å‡πà‡∏≠‡∏ô upsert
      const existing = await prisma.comment.findUnique({
        where: { commentId: comment.commentId },
        select: { updatedAt: true, videoId: true }
      });

      // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô "‡πÉ‡∏´‡∏°‡πà" ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ existing
      // ‡∏´‡∏£‡∏∑‡∏≠ "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" ‡∏ñ‡πâ‡∏≤ updatedAt ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
      const isNewOrUpdated =
        !existing || (new Date(comment.updatedAt) > new Date(existing.updatedAt));

      await prisma.comment.upsert({
        where: { commentId: comment.commentId },
        create: {
          commentId: comment.commentId,
          textOriginal: comment.textOriginal,
          updatedAt: comment.updatedAt,
          authorDisplayName: comment.authorDisplayName,
          authorProfileImageUrl: comment.authorProfileImageUrl,
          authorChannelId: comment.authorChannelId,
          videoId: comment.videoId,
          canReply: comment.canReply,
          totalReplyCount: comment.totalReplyCount,
          publishedAt: comment.publishedAt
        },
        update: {
          textOriginal: comment.textOriginal,
          updatedAt: comment.updatedAt,
          authorDisplayName: comment.authorDisplayName,
          authorProfileImageUrl: comment.authorProfileImageUrl,
          authorChannelId: comment.authorChannelId,
          videoId: comment.videoId,
          canReply: comment.canReply,
          totalReplyCount: comment.totalReplyCount,
          publishedAt: comment.publishedAt
        }
      });

      if (isNewOrUpdated) {
        affectedVideoIds.add(comment.videoId);
      }

      synced += 1;
    }

    if (!nextPageToken || stop) {
      break;
    }

    pageToken = nextPageToken;
  }

  // ‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Ñ‡πà‡∏≠‡∏¢ "‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥ transcript" ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  if (affectedVideoIds.size > 0) {
    console.log(`[syncComments] Found ${affectedVideoIds.size} affected video(s), triggering transcript indexing`);
    await ensureVideoIndexFor(affectedVideoIds);
  }

  return { synced, affectedVideoIds: Array.from(affectedVideoIds) };
}
